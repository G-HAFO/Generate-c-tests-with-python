
#include <stdio.h>
#include <stdlib.h>
#include <setjmp.h>
#include <stdarg.h>
#include <stddef.h>
#include <stdint.h>
#include <cmocka.h>
#include "dbg.h"

static void test_add_U384_MAX(void** state)
{
            uint16_t num1[24] = {0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff
                               , 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff
                               , 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff
                               , 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff};
      const uint16_t num2[24] = {0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff
                               , 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff
                               , 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff
                               , 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff};
    /* correct answer */
    const uint16_t result[24] = {0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff
                               , 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff
                               , 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff
                               , 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x1fff};

    add_U384(num1, num2);

    /* check result */
    for (int i = 0; i < sizeof(num1) / sizeof(uint16_t); i++)
    {
        assert_int_equal(num1[i], result[i]);
    }
}

static void test_add_U384_MIN(void** state)
{
            uint16_t num1[24] = {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
                               , 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
                               , 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
                               , 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000};
      const uint16_t num2[24] = {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
                               , 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
                               , 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
                               , 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000};
    /* correct answer */
    const uint16_t result[24] ={0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
                               , 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
                               , 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
                               , 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000};

    add_U384(num1, num2);

    /* check result */
    for (int i = 0; i < sizeof(num1) / sizeof(uint16_t); i++)
    {
        assert_int_equal(num1[i], result[i]);
    }
}


static void test_add_U384_0(void** state)
{
           /*check_num1=0x508f75914ab212d031ae2d401aad7e907fa676cedc2e7f1c618628fe532f59cb008e80066ae7ebba03cf58c4467dc5bd
             check_num2=0x2f443f183ff81f8f52949c47f4b383762703423b7760c7883054bd2979120b1b483c57c5eaa4f61d1ba73dd93636794
             check_result=0x5383b982ceb194c926d7770499f8b6c7e216aaf293a48b94e48b74d0eac07a7cb5124582c9923b1bd589cca1d9e12d51*/
           uint16_t num1[24] = {0xc5bd, 0x467d, 0x58c4, 0x03cf, 0xebba, 0x6ae7,
                                0x8006, 0x008e, 0x59cb, 0x532f, 0x28fe, 0x6186,
                                0x7f1c, 0xdc2e, 0x76ce, 0x7fa6, 0x7e90, 0x1aad,
                                0x2d40, 0x31ae, 0x12d0, 0x4ab2, 0x7591, 0x508f,};
      const uint16_t num2[24] = {0x794, 0x3636, 0x3dd9, 0x1ba7, 0xf61d, 0xeaa4,
                                0x57c5, 0x483c, 0x0b1b, 0x7912, 0xbd29, 0x3054,
                                0xc788, 0x7760, 0x423b, 0x2703, 0x8376, 0xf4b3,
                                0x9c47, 0x5294, 0x1f8f, 0x3ff8, 0x3f18, 0x2f44,};
    /* correct answer */
    const uint16_t result[24] = {0x2d51, 0xd9e1, 0xcca1, 0xd589, 0x3b1b, 0xc992,
                                0x4582, 0xb512, 0x7a7c, 0xeac0, 0x74d0, 0xe48b,
                                0x8b94, 0x93a4, 0xaaf2, 0xe216, 0xb6c7, 0x99f8,
                                0x7704, 0x26d7, 0x94c9, 0xceb1, 0xb982, 0x5383,};

    add_U384(num1, num2);

    /* check result */
    for (int i = 0; i < sizeof(num1) / sizeof(uint16_t); i++)
    {
        assert_int_equal(num1[i], result[i]);
    }
}
static void test_add_U384_1(void** state)
{
           /*check_num1=0x64fc64aea495e96e15395a9c20bbd54f9a6e62b69b1b7f38caab8a5fdd1f79aa060f5f964ef9919da3cb8e6c964b5767
             check_num2=0x813e94fe9c0931f05208a56e0c48dda5fddea1596fa650233b7d9568a318cac105c7a50ac9017490f4af0b1122b8bfdb
             check_result=0xe63af9ad409f1b5e6742000a2d04b2f5984d04100ac1cf5c06291fc88038446b0bd704a117fb062e987a997db9041742*/
           uint16_t num1[24] = {0x5767, 0x964b, 0x8e6c, 0xa3cb, 0x919d, 0x4ef9,
                                0x5f96, 0x060f, 0x79aa, 0xdd1f, 0x8a5f, 0xcaab,
                                0x7f38, 0x9b1b, 0x62b6, 0x9a6e, 0xd54f, 0x20bb,
                                0x5a9c, 0x1539, 0xe96e, 0xa495, 0x64ae, 0x64fc,};
      const uint16_t num2[24] = {0xbfdb, 0x22b8, 0x0b11, 0xf4af, 0x7490, 0xc901,
                                0xa50a, 0x05c7, 0xcac1, 0xa318, 0x9568, 0x3b7d,
                                0x5023, 0x6fa6, 0xa159, 0xfdde, 0xdda5, 0x0c48,
                                0xa56e, 0x5208, 0x31f0, 0x9c09, 0x94fe, 0x813e,};
    /* correct answer */
    const uint16_t result[24] = {0x1742, 0xb904, 0x997d, 0x987a, 0x062e, 0x17fb,
                                0x04a1, 0x0bd7, 0x446b, 0x8038, 0x1fc8, 0x0629,
                                0xcf5c, 0x0ac1, 0x0410, 0x984d, 0xb2f5, 0x2d04,
                                0x000a, 0x6742, 0x1b5e, 0x409f, 0xf9ad, 0xe63a,};

    add_U384(num1, num2);

    /* check result */
    for (int i = 0; i < sizeof(num1) / sizeof(uint16_t); i++)
    {
        assert_int_equal(num1[i], result[i]);
    }
}
static void test_add_U384_2(void** state)
{
           /*check_num1=0xaa8b741f55e71bf6bbc42554348a7f0663359106e55ca64db9ae82ecef555885ed4722a2ef369837b315f6f8419dcaec
             check_num2=0x332189d405e9b568d704e1e59dbfa3da6b0a53f24b5c65a42e68e10209cb43e3d688ecb050a11156b0303be38c493201
             check_result=0xddacfdf35bd0d15f92c90739d24a22e0ce3fe4f930b90bf1e81763eef9209c69c3d00f533fd7a98e634632dbcde6fced*/
           uint16_t num1[24] = {0xcaec, 0x419d, 0xf6f8, 0xb315, 0x9837, 0xef36,
                                0x22a2, 0xed47, 0x5885, 0xef55, 0x82ec, 0xb9ae,
                                0xa64d, 0xe55c, 0x9106, 0x6335, 0x7f06, 0x348a,
                                0x2554, 0xbbc4, 0x1bf6, 0x55e7, 0x741f, 0xaa8b,};
      const uint16_t num2[24] = {0x3201, 0x8c49, 0x3be3, 0xb030, 0x1156, 0x50a1,
                                0xecb0, 0xd688, 0x43e3, 0x09cb, 0xe102, 0x2e68,
                                0x65a4, 0x4b5c, 0x53f2, 0x6b0a, 0xa3da, 0x9dbf,
                                0xe1e5, 0xd704, 0xb568, 0x05e9, 0x89d4, 0x3321,};
    /* correct answer */
    const uint16_t result[24] = {0xfced, 0xcde6, 0x32db, 0x6346, 0xa98e, 0x3fd7,
                                0x0f53, 0xc3d0, 0x9c69, 0xf920, 0x63ee, 0xe817,
                                0x0bf1, 0x30b9, 0xe4f9, 0xce3f, 0x22e0, 0xd24a,
                                0x0739, 0x92c9, 0xd15f, 0x5bd0, 0xfdf3, 0xddac,};

    add_U384(num1, num2);

    /* check result */
    for (int i = 0; i < sizeof(num1) / sizeof(uint16_t); i++)
    {
        assert_int_equal(num1[i], result[i]);
    }
}
static void test_add_U384_3(void** state)
{
           /*check_num1=0x4e2da5cfe4485b26c088f229d358d16d0f4f8fcdc383ef0e2bf65673c048e9aa64faffff770e2eade644123cc55228b1
             check_num2=0xb0933f9fff5f6a842d559884733d50e046039c86c8e303b7f54396fcb94043b1c73b07837584431d2ef5434b822fe57c
             check_result=0xfec0e56fe3a7c5aaedde8aae4696224d55532c548c66f2c62139ed7079892d5c2c360782ec9271cb1539558847820e2d*/
           uint16_t num1[24] = {0x28b1, 0xc552, 0x123c, 0xe644, 0x2ead, 0x770e,
                                0xffff, 0x64fa, 0xe9aa, 0xc048, 0x5673, 0x2bf6,
                                0xef0e, 0xc383, 0x8fcd, 0x0f4f, 0xd16d, 0xd358,
                                0xf229, 0xc088, 0x5b26, 0xe448, 0xa5cf, 0x4e2d,};
      const uint16_t num2[24] = {0xe57c, 0x822f, 0x434b, 0x2ef5, 0x431d, 0x7584,
                                0x0783, 0xc73b, 0x43b1, 0xb940, 0x96fc, 0xf543,
                                0x03b7, 0xc8e3, 0x9c86, 0x4603, 0x50e0, 0x733d,
                                0x9884, 0x2d55, 0x6a84, 0xff5f, 0x3f9f, 0xb093,};
    /* correct answer */
    const uint16_t result[24] = {0x0e2d, 0x4782, 0x5588, 0x1539, 0x71cb, 0xec92,
                                0x0782, 0x2c36, 0x2d5c, 0x7989, 0xed70, 0x2139,
                                0xf2c6, 0x8c66, 0x2c54, 0x5553, 0x224d, 0x4696,
                                0x8aae, 0xedde, 0xc5aa, 0xe3a7, 0xe56f, 0xfec0,};

    add_U384(num1, num2);

    /* check result */
    for (int i = 0; i < sizeof(num1) / sizeof(uint16_t); i++)
    {
        assert_int_equal(num1[i], result[i]);
    }
}
static void test_add_U384_4(void** state)
{
           /*check_num1=0x7ba6b6abbd518f44d5e0919df36cab2ae96bbd320097064e8032edb276d3a5849c4789451db5252f8f4f7e37ec4aa7d
             check_num2=0xc5663ee232f08d6bd9add90bb2da7e5fe705724e5cfe732a9f9b21bdbef08f171948fd5e737b6035f215bde4e90ba759
             check_result=0xcd20aa4ceec5a660270be22592114912959c2e217d07e38f879e5098e65dc96f630d75f2c556b288eb0ab5c867d051d6*/
           uint16_t num1[24] = {0xa7d, 0xec4a, 0x7e37, 0x8f4f, 0x252f, 0x1db5,
                                0x8945, 0x9c47, 0xa584, 0x76d3, 0xedb2, 0x8032,
                                0x064e, 0x0097, 0xbd32, 0xe96b, 0xab2a, 0xf36c,
                                0x919d, 0xd5e0, 0x8f44, 0xbd51, 0xb6ab, 0x7ba6,};
      const uint16_t num2[24] = {0xa759, 0xe90b, 0xbde4, 0xf215, 0x6035, 0x737b,
                                0xfd5e, 0x1948, 0x8f17, 0xbef0, 0x21bd, 0x9f9b,
                                0x732a, 0x5cfe, 0x724e, 0xe705, 0x7e5f, 0xb2da,
                                0xd90b, 0xd9ad, 0x8d6b, 0x32f0, 0x3ee2, 0xc566,};
    /* correct answer */
    const uint16_t result[24] = {0x51d6, 0x67d0, 0xb5c8, 0xeb0a, 0xb288, 0xc556,
                                0x75f2, 0x630d, 0xc96f, 0xe65d, 0x5098, 0x879e,
                                0xe38f, 0x7d07, 0x2e21, 0x959c, 0x4912, 0x9211,
                                0xe225, 0x270b, 0xa660, 0xeec5, 0xaa4c, 0xcd20,};

    add_U384(num1, num2);

    /* check result */
    for (int i = 0; i < sizeof(num1) / sizeof(uint16_t); i++)
    {
        assert_int_equal(num1[i], result[i]);
    }
}
static void test_add_U384_5(void** state)
{
           /*check_num1=0x9b61cfe71b18eb6381937b20b8437db929e99157f4afbc027f34a394bd6d09230668a2ae42cb458a3c2eb6303f329532
             check_num2=0x614373d845c9138ad69598aa8263cd77a81fe1c2960c7132f26d08217584f9e02ef422632e2913cb217bd28a7f748068
             check_result=0xfca543bf60e1feee582913cb3aa74b30d209731a8abc2d3571a1abb632f20303355cc51170f459555daa88babea7159a*/
           uint16_t num1[24] = {0x9532, 0x3f32, 0xb630, 0x3c2e, 0x458a, 0x42cb,
                                0xa2ae, 0x0668, 0x0923, 0xbd6d, 0xa394, 0x7f34,
                                0xbc02, 0xf4af, 0x9157, 0x29e9, 0x7db9, 0xb843,
                                0x7b20, 0x8193, 0xeb63, 0x1b18, 0xcfe7, 0x9b61,};
      const uint16_t num2[24] = {0x8068, 0x7f74, 0xd28a, 0x217b, 0x13cb, 0x2e29,
                                0x2263, 0x2ef4, 0xf9e0, 0x7584, 0x0821, 0xf26d,
                                0x7132, 0x960c, 0xe1c2, 0xa81f, 0xcd77, 0x8263,
                                0x98aa, 0xd695, 0x138a, 0x45c9, 0x73d8, 0x6143,};
    /* correct answer */
    const uint16_t result[24] = {0x159a, 0xbea7, 0x88ba, 0x5daa, 0x5955, 0x70f4,
                                0xc511, 0x355c, 0x0303, 0x32f2, 0xabb6, 0x71a1,
                                0x2d35, 0x8abc, 0x731a, 0xd209, 0x4b30, 0x3aa7,
                                0x13cb, 0x5829, 0xfeee, 0x60e1, 0x43bf, 0xfca5,};

    add_U384(num1, num2);

    /* check result */
    for (int i = 0; i < sizeof(num1) / sizeof(uint16_t); i++)
    {
        assert_int_equal(num1[i], result[i]);
    }
}
static void test_add_U384_6(void** state)
{
           /*check_num1=0x5908921054afaa3f0814b79cd8a0475708bb76f880f926bb4fb428d20131f842d64ba68089b9308868106b1af76f656f
             check_num2=0x12aa6ab9704f47cce2c92db6a4bc1049ea67f8258a14d370420b2b045bcdb6aa4aaf5e3210b9ca6a373651d62b414d5e
             check_result=0x6bb2fcc9c4fef20beadde5537d5c57a0f3236f1e0b0dfa2b91bf53d65cffaeed20fb04b29a72faf29f46bcf122b0b2cd*/
           uint16_t num1[24] = {0x656f, 0xf76f, 0x6b1a, 0x6810, 0x3088, 0x89b9,
                                0xa680, 0xd64b, 0xf842, 0x0131, 0x28d2, 0x4fb4,
                                0x26bb, 0x80f9, 0x76f8, 0x08bb, 0x4757, 0xd8a0,
                                0xb79c, 0x0814, 0xaa3f, 0x54af, 0x9210, 0x5908,};
      const uint16_t num2[24] = {0x4d5e, 0x2b41, 0x51d6, 0x3736, 0xca6a, 0x10b9,
                                0x5e32, 0x4aaf, 0xb6aa, 0x5bcd, 0x2b04, 0x420b,
                                0xd370, 0x8a14, 0xf825, 0xea67, 0x1049, 0xa4bc,
                                0x2db6, 0xe2c9, 0x47cc, 0x704f, 0x6ab9, 0x12aa,};
    /* correct answer */
    const uint16_t result[24] = {0xb2cd, 0x22b0, 0xbcf1, 0x9f46, 0xfaf2, 0x9a72,
                                0x04b2, 0x20fb, 0xaeed, 0x5cff, 0x53d6, 0x91bf,
                                0xfa2b, 0x0b0d, 0x6f1e, 0xf323, 0x57a0, 0x7d5c,
                                0xe553, 0xeadd, 0xf20b, 0xc4fe, 0xfcc9, 0x6bb2,};

    add_U384(num1, num2);

    /* check result */
    for (int i = 0; i < sizeof(num1) / sizeof(uint16_t); i++)
    {
        assert_int_equal(num1[i], result[i]);
    }
}
static void test_add_U384_7(void** state)
{
           /*check_num1=0x18e8a485bafdbda7f31f968a8d7f61404e6d64781a782d43b42b04282bcfd098a0aae0babe0803ba356f2f33fd116010
             check_num2=0xb14a093c96d0aa1151f6a822926dbd5573685a6b3334d9acf376932de98ae47067e6ade382001a18e348a3fde584f4c
             check_result=0x23fd4519846ac849083f010cb6a63d15a5a3ea1ecdab7ade83626d5b0a687edfa7294b98f628055bc3a3b973db69af5c*/
           uint16_t num1[24] = {0x6010, 0xfd11, 0x2f33, 0x356f, 0x03ba, 0xbe08,
                                0xe0ba, 0xa0aa, 0xd098, 0x2bcf, 0x0428, 0xb42b,
                                0x2d43, 0x1a78, 0x6478, 0x4e6d, 0x6140, 0x8d7f,
                                0x968a, 0xf31f, 0xbda7, 0xbafd, 0xa485, 0x18e8,};
      const uint16_t num2[24] = {0xf4c, 0xe584, 0xa3fd, 0xe348, 0x1a18, 0x8200,
                                0xade3, 0x67e6, 0xe470, 0xe98a, 0x932d, 0xf376,
                                0xd9ac, 0x3334, 0x5a6b, 0x7368, 0xbd55, 0x926d,
                                0xa822, 0x51f6, 0xaa11, 0x96d0, 0x093c, 0xb14a,};
    /* correct answer */
    const uint16_t result[24] = {0xaf5c, 0xdb69, 0xb973, 0xc3a3, 0x055b, 0xf628,
                                0x4b98, 0xa729, 0x7edf, 0x0a68, 0x6d5b, 0x8362,
                                0x7ade, 0xcdab, 0xea1e, 0xa5a3, 0x3d15, 0xb6a6,
                                0x010c, 0x083f, 0xc849, 0x846a, 0x4519, 0x23fd,};

    add_U384(num1, num2);

    /* check result */
    for (int i = 0; i < sizeof(num1) / sizeof(uint16_t); i++)
    {
        assert_int_equal(num1[i], result[i]);
    }
}
static void test_add_U384_8(void** state)
{
           /*check_num1=0x1bd62f27e2ed2892e8bf3d0abe37cb4d2a1c2aa9315ef0d5ac8892dbfcce0ccf5a6dd47c3eb3da7518bba8beffa76887
             check_num2=0x30fb2a8a59d6f563a40f34ce58f47cbd18cd06f58d54592020a9a9e6c8017d6f5b87ec70d0645b899190736882508c9a
             check_result=0x4cd159b23cc41df68cce71d9172c480a42e9319ebeb349f5cd323cc2c4cf8a3eb5f5c0ed0f1835feaa4c1c2781f7f521*/
           uint16_t num1[24] = {0x6887, 0xffa7, 0xa8be, 0x18bb, 0xda75, 0x3eb3,
                                0xd47c, 0x5a6d, 0x0ccf, 0xfcce, 0x92db, 0xac88,
                                0xf0d5, 0x315e, 0x2aa9, 0x2a1c, 0xcb4d, 0xbe37,
                                0x3d0a, 0xe8bf, 0x2892, 0xe2ed, 0x2f27, 0x1bd6,};
      const uint16_t num2[24] = {0x8c9a, 0x8250, 0x7368, 0x9190, 0x5b89, 0xd064,
                                0xec70, 0x5b87, 0x7d6f, 0xc801, 0xa9e6, 0x20a9,
                                0x5920, 0x8d54, 0x06f5, 0x18cd, 0x7cbd, 0x58f4,
                                0x34ce, 0xa40f, 0xf563, 0x59d6, 0x2a8a, 0x30fb,};
    /* correct answer */
    const uint16_t result[24] = {0xf521, 0x81f7, 0x1c27, 0xaa4c, 0x35fe, 0x0f18,
                                0xc0ed, 0xb5f5, 0x8a3e, 0xc4cf, 0x3cc2, 0xcd32,
                                0x49f5, 0xbeb3, 0x319e, 0x42e9, 0x480a, 0x172c,
                                0x71d9, 0x8cce, 0x1df6, 0x3cc4, 0x59b2, 0x4cd1,};

    add_U384(num1, num2);

    /* check result */
    for (int i = 0; i < sizeof(num1) / sizeof(uint16_t); i++)
    {
        assert_int_equal(num1[i], result[i]);
    }
}
static void test_add_U384_9(void** state)
{
           /*check_num1=0x1d34ea8f2113380a8971fe0a1b5ab2061e15a6139af0ce4555b0b0cb5d63f158c297c9578921a4e7f4c85e5a85867c85
             check_num2=0xd98bca8df7b7773e466c83c82f179e2ede3551ab2414974543c44b7d5b7957e0262398d3f61585885896d0b987438724
             check_result=0xf6c0b51d18caaf48cfde81d24a725034fc4af7bebf05658a9974fc48b8dd4938e8bb622b7f372a704d5f2f140cca03a9*/
           uint16_t num1[24] = {0x7c85, 0x8586, 0x5e5a, 0xf4c8, 0xa4e7, 0x8921,
                                0xc957, 0xc297, 0xf158, 0x5d63, 0xb0cb, 0x55b0,
                                0xce45, 0x9af0, 0xa613, 0x1e15, 0xb206, 0x1b5a,
                                0xfe0a, 0x8971, 0x380a, 0x2113, 0xea8f, 0x1d34,};
      const uint16_t num2[24] = {0x8724, 0x8743, 0xd0b9, 0x5896, 0x8588, 0xf615,
                                0x98d3, 0x2623, 0x57e0, 0x5b79, 0x4b7d, 0x43c4,
                                0x9745, 0x2414, 0x51ab, 0xde35, 0x9e2e, 0x2f17,
                                0x83c8, 0x466c, 0x773e, 0xf7b7, 0xca8d, 0xd98b,};
    /* correct answer */
    const uint16_t result[24] = {0x03a9, 0x0cca, 0x2f14, 0x4d5f, 0x2a70, 0x7f37,
                                0x622b, 0xe8bb, 0x4938, 0xb8dd, 0xfc48, 0x9974,
                                0x658a, 0xbf05, 0xf7be, 0xfc4a, 0x5034, 0x4a72,
                                0x81d2, 0xcfde, 0xaf48, 0x18ca, 0xb51d, 0xf6c0,};

    add_U384(num1, num2);

    /* check result */
    for (int i = 0; i < sizeof(num1) / sizeof(uint16_t); i++)
    {
        assert_int_equal(num1[i], result[i]);
    }
}

int main(int argc, char **argv)
{
    const struct CMUnitTest tests[] =
    {
    cmocka_unit_test(test_add_U384_MAX),
    
    cmocka_unit_test(test_add_U384_MIN),
     
      cmocka_unit_test(test_add_U384_0),

      cmocka_unit_test(test_add_U384_1),

      cmocka_unit_test(test_add_U384_2),

      cmocka_unit_test(test_add_U384_3),

      cmocka_unit_test(test_add_U384_4),

      cmocka_unit_test(test_add_U384_5),

      cmocka_unit_test(test_add_U384_6),

      cmocka_unit_test(test_add_U384_7),

      cmocka_unit_test(test_add_U384_8),

      cmocka_unit_test(test_add_U384_9),

    };

    return cmocka_run_group_tests(tests, NULL, NULL);
}


